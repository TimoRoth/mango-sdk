namespace Mango.Compiler.Syntax
{
    public abstract partial class TypeSyntax : SyntaxNode { private protected TypeSyntax(SyntaxKind kind) : base(kind) { } }
    public sealed partial class ArrayTypeSyntax : TypeSyntax { public TypeSyntax ElementType { get; } public int Length { get; } internal ArrayTypeSyntax(TypeSyntax elementType, int length) : base(SyntaxKind.ArrayType) { ElementType = elementType; Length = length; } public override void Accept(SyntaxVisitor visitor) => visitor.VisitArrayType(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitArrayType(this); }
    public sealed partial class FunctionTypeSyntax : TypeSyntax { public TypeSyntax ReturnType { get; } public SyntaxList<TypeSyntax> ParameterTypes { get; } internal FunctionTypeSyntax(TypeSyntax returnType, SyntaxList<TypeSyntax> parameterTypes) : base(SyntaxKind.FunctionType) { ReturnType = returnType; ParameterTypes = parameterTypes; } public override void Accept(SyntaxVisitor visitor) => visitor.VisitFunctionType(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitFunctionType(this); }
    public sealed partial class StructuredTypeSyntax : TypeSyntax { public string ModuleName { get; } public string TypeName { get; } internal StructuredTypeSyntax(string moduleName, string typeName) : base(SyntaxKind.StructuredType) { ModuleName = moduleName; TypeName = typeName; } public override void Accept(SyntaxVisitor visitor) => visitor.VisitStructuredType(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitStructuredType(this); }
    public sealed partial class PredefinedTypeSyntax : TypeSyntax { internal PredefinedTypeSyntax(SyntaxKind kind) : base(kind) { } public override void Accept(SyntaxVisitor visitor) => visitor.VisitPredefinedType(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitPredefinedType(this); }
    public sealed partial class ReferenceTypeSyntax : TypeSyntax { public TypeSyntax ReferencedType { get; } internal ReferenceTypeSyntax(TypeSyntax referencedType) : base(SyntaxKind.ReferenceType) { ReferencedType = referencedType; } public override void Accept(SyntaxVisitor visitor) => visitor.VisitReferenceType(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitReferenceType(this); }
    public sealed partial class SpanTypeSyntax : TypeSyntax { public TypeSyntax ElementType { get; } internal SpanTypeSyntax(TypeSyntax elementType) : base(SyntaxKind.SpanType) { ElementType = elementType; } public override void Accept(SyntaxVisitor visitor) => visitor.VisitSpanType(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitSpanType(this); }

    public sealed partial class CompilationUnitSyntax : SyntaxNode { public SyntaxList<ModuleDeclarationSyntax> Modules { get; } internal CompilationUnitSyntax(SyntaxList<ModuleDeclarationSyntax> modules) : base(SyntaxKind.CompilationUnit) { Modules = modules; } public override void Accept(SyntaxVisitor visitor) => visitor.VisitCompilationUnit(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitCompilationUnit(this); }

    public sealed partial class ModuleDeclarationSyntax : SyntaxNode { public string ModuleName { get; } public SyntaxList<ImportDirectiveSyntax> Imports { get; } public SyntaxList<ModuleMemberSyntax> Members { get; } internal ModuleDeclarationSyntax(string moduleName, SyntaxList<ImportDirectiveSyntax> imports, SyntaxList<ModuleMemberSyntax> members) : base(SyntaxKind.ModuleDeclaration) { ModuleName = moduleName; Imports = imports; Members = members; } public override void Accept(SyntaxVisitor visitor) => visitor.VisitModuleDeclaration(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitModuleDeclaration(this); }
    public sealed partial class ImportDirectiveSyntax : SyntaxNode { public string ModuleName { get; } public ImportDirectiveSyntax(string moduleName) : base(SyntaxKind.ImportDirective) { ModuleName = moduleName; } public override void Accept(SyntaxVisitor visitor) => visitor.VisitImportDirective(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitImportDirective(this); }
    public abstract partial class ModuleMemberSyntax : SyntaxNode { private protected ModuleMemberSyntax(SyntaxKind kind) : base(kind) { } }

    public sealed partial class TypeDeclarationSyntax : ModuleMemberSyntax { public string TypeName { get; } public SyntaxList<FieldDeclarationSyntax> Fields { get; } internal TypeDeclarationSyntax(string typeName, SyntaxList<FieldDeclarationSyntax> fields) : base(SyntaxKind.TypeDeclaration) { TypeName = typeName; Fields = fields; } public override void Accept(SyntaxVisitor visitor) => visitor.VisitTypeDeclaration(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitTypeDeclaration(this); }
    public sealed partial class FieldDeclarationSyntax : SyntaxNode { public TypeSyntax FieldType { get; } public string FieldName { get; } internal FieldDeclarationSyntax(TypeSyntax fieldType, string fieldName) : base(SyntaxKind.FieldDeclaration) { FieldType = fieldType; FieldName = fieldName; } public override void Accept(SyntaxVisitor visitor) => visitor.VisitFieldDeclaration(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitFieldDeclaration(this); }

    public sealed partial class FunctionDeclarationSyntax : ModuleMemberSyntax { public TypeSyntax ReturnType { get; } public string FunctionName { get; } public SyntaxList<ParameterDeclarationSyntax> Parameters { get; } public int? SystemCallOrdinal { get; } public FunctionBodySyntax Body { get; } internal FunctionDeclarationSyntax(TypeSyntax returnType, string functionName, SyntaxList<ParameterDeclarationSyntax> parameters, int? systemCallOrdinal, FunctionBodySyntax body) : base(SyntaxKind.FunctionDeclaration) { ReturnType = returnType; FunctionName = functionName; Parameters = parameters; SystemCallOrdinal = systemCallOrdinal; Body = body; } public override void Accept(SyntaxVisitor visitor) => visitor.VisitFunctionDeclaration(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitFunctionDeclaration(this); }
    public sealed partial class ParameterDeclarationSyntax : SyntaxNode { public TypeSyntax ParameterType { get; } public string ParameterName { get; } internal ParameterDeclarationSyntax(TypeSyntax parameterType, string parameterName) : base(SyntaxKind.ParameterDeclaration) { ParameterType = parameterType; ParameterName = parameterName; } public override void Accept(SyntaxVisitor visitor) => visitor.VisitParameterDeclaration(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitParameterDeclaration(this); }
    public sealed partial class FunctionBodySyntax : SyntaxNode { public SyntaxList<LocalDeclarationSyntax> Locals { get; } public SyntaxList<InstructionSyntax> Instructions { get; } internal FunctionBodySyntax(SyntaxList<LocalDeclarationSyntax> locals, SyntaxList<InstructionSyntax> instructions) : base(SyntaxKind.FunctionBody) { Locals = locals; Instructions = instructions; } public override void Accept(SyntaxVisitor visitor) => visitor.VisitFunctionBody(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitFunctionBody(this); }
    public sealed partial class LocalDeclarationSyntax : SyntaxNode { public TypeSyntax LocalType { get; } public string LocalName { get; } internal LocalDeclarationSyntax(TypeSyntax localType, string localName) : base(SyntaxKind.LocalDeclaration) { LocalType = localType; LocalName = localName; } public override void Accept(SyntaxVisitor visitor) => visitor.VisitLocalDeclaration(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitLocalDeclaration(this); }

    public abstract partial class InstructionSyntax : SyntaxNode { private protected InstructionSyntax(SyntaxKind kind) : base(kind) { } }
    public sealed partial class ArgumentInstructionSyntax : InstructionSyntax { public string ParameterName { get; } internal ArgumentInstructionSyntax(SyntaxKind kind, string parameterName) : base(kind) { ParameterName = parameterName; } public override void Accept(SyntaxVisitor visitor) => visitor.VisitArgumentInstruction(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitArgumentInstruction(this); }
    public sealed partial class BranchInstructionSyntax : InstructionSyntax { public string LabelName { get; } internal BranchInstructionSyntax(SyntaxKind kind, string labelName) : base(kind) { LabelName = labelName; } public override void Accept(SyntaxVisitor visitor) => visitor.VisitBranchInstruction(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitBranchInstruction(this); }
    public sealed partial class ConstantInstructionSyntax : InstructionSyntax { public TypeSyntax ConstantType { get; } public int ConstantValue { get; } internal ConstantInstructionSyntax(SyntaxKind kind, TypeSyntax constantType, int constantValue) : base(kind) { ConstantType = constantType; ConstantValue = constantValue; } public override void Accept(SyntaxVisitor visitor) => visitor.VisitConstantInstruction(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitConstantInstruction(this); }
    public sealed partial class FieldInstructionSyntax : InstructionSyntax { public TypeSyntax FieldType { get; } public StructuredTypeSyntax ContainingType { get; } public string FieldName { get; } internal FieldInstructionSyntax(SyntaxKind kind, TypeSyntax fieldType, StructuredTypeSyntax containingType, string fieldName) : base(kind) { FieldType = fieldType; ContainingType = containingType; FieldName = fieldName; } public override void Accept(SyntaxVisitor visitor) => visitor.VisitFieldInstruction(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitFieldInstruction(this); }
    public sealed partial class FunctionInstructionSyntax : InstructionSyntax { public TypeSyntax ReturnType { get; } public string ModuleName { get; } public string FunctionName { get; } public SyntaxList<TypeSyntax> ParameterTypes { get; } internal FunctionInstructionSyntax(SyntaxKind kind, TypeSyntax returnType, string moduleName, string functionName, SyntaxList<TypeSyntax> parameterTypes) : base(kind) { ReturnType = returnType; ModuleName = moduleName; FunctionName = functionName; ParameterTypes = parameterTypes; } public override void Accept(SyntaxVisitor visitor) => visitor.VisitFunctionInstruction(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitFunctionInstruction(this); }
    public sealed partial class LabeledInstructionSyntax : InstructionSyntax { public string LabelName { get; } public InstructionSyntax LabeledInstruction { get; } internal LabeledInstructionSyntax(string labelName, InstructionSyntax labeledInstruction) : base(SyntaxKind.LabeledInstruction) { LabelName = labelName; LabeledInstruction = labeledInstruction; } public override void Accept(SyntaxVisitor visitor) => visitor.VisitLabeledInstruction(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitLabeledInstruction(this); }
    public sealed partial class LocalInstructionSyntax : InstructionSyntax { public string LocalName { get; } internal LocalInstructionSyntax(SyntaxKind kind, string localName) : base(kind) { LocalName = localName; } public override void Accept(SyntaxVisitor visitor) => visitor.VisitLocalInstruction(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitLocalInstruction(this); }
    public sealed partial class NoneInstructionSyntax : InstructionSyntax { internal NoneInstructionSyntax(SyntaxKind kind) : base(kind) { } public override void Accept(SyntaxVisitor visitor) => visitor.VisitNoneInstruction(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitNoneInstruction(this); }
    public sealed partial class TypeInstructionSyntax : InstructionSyntax { public TypeSyntax Type { get; } internal TypeInstructionSyntax(SyntaxKind kind, TypeSyntax type) : base(kind) { Type = type; } public override void Accept(SyntaxVisitor visitor) => visitor.VisitTypeInstruction(this); public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) => visitor.VisitTypeInstruction(this); }
}
